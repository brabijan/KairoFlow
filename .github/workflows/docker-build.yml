name: Build and Deploy

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to Kubernetes'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push PHP image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/php/Dockerfile
          push: true
          tags: |
            ghcr.io/brabijan/kairoflow/php:latest
            ghcr.io/brabijan/kairoflow/php:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/nginx/Dockerfile
          push: true
          tags: |
            ghcr.io/brabijan/kairoflow/nginx:latest
            ghcr.io/brabijan/kairoflow/nginx:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  infrastructure:
    name: Update Infrastructure Secrets
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig

      - name: Create namespace if not exists
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          kubectl create namespace kairoflow --dry-run=client -o yaml | kubectl apply -f -

      - name: Update GHCR secret
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --namespace=kairoflow \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update database secret
        if: env.DATABASE_HOST != ''
        env:
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          kubectl create secret generic kairoflow-database-secret \
            --namespace=kairoflow \
            --from-literal=host="${DATABASE_HOST}" \
            --from-literal=port="5432" \
            --from-literal=name="${DATABASE_NAME}" \
            --from-literal=user="${DATABASE_USER}" \
            --from-literal=password="${DATABASE_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update Redis secret
        if: env.REDIS_HOST != ''
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          kubectl create secret generic kairoflow-redis-secret \
            --namespace=kairoflow \
            --from-literal=host="${REDIS_HOST}" \
            --from-literal=port="${REDIS_PORT:-6379}" \
            --from-literal=password="${REDIS_PASSWORD}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update MinIO secret
        if: env.MINIO_ENDPOINT != ''
        env:
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          kubectl create secret generic kairoflow-minio-secret \
            --namespace=kairoflow \
            --from-literal=endpoint="${MINIO_ENDPOINT}" \
            --from-literal=accessKey="${MINIO_ACCESS_KEY}" \
            --from-literal=secretKey="${MINIO_SECRET_KEY}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update OpenAI secret
        if: env.OPENAI_API_KEY != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          kubectl create secret generic kairoflow-openai-secret \
            --namespace=kairoflow \
            --from-literal=apiKey="${OPENAI_API_KEY}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update application secrets
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          # Generate secrets if not provided
          APP_SECRET="${{ secrets.APP_SECRET }}"
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          
          if [ -z "$APP_SECRET" ]; then
            APP_SECRET=$(openssl rand -hex 32)
          fi
          
          if [ -z "$JWT_SECRET" ]; then
            JWT_SECRET=$(openssl rand -hex 32)
          fi
          
          kubectl create secret generic kairoflow-app-secret \
            --namespace=kairoflow \
            --from-literal=appSecret="${APP_SECRET}" \
            --from-literal=jwtSecret="${JWT_SECRET}" \
            --dry-run=client -o yaml | kubectl apply -f -

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build, infrastructure]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event.inputs.deploy == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig

      - name: Update Helm values
        run: |
          cat > values.prod.yaml <<EOF
          image:
            nginx:
              repository: ghcr.io/brabijan/kairoflow/nginx
              tag: ${{ github.sha }}
            php:
              repository: ghcr.io/brabijan/kairoflow/php
              tag: ${{ github.sha }}
          
          ingress:
            host: ${{ secrets.INGRESS_HOST || 'kairoflow.example.com' }}
          
          ghcr:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
          EOF

      - name: Deploy with Helm
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          # Upgrade or install (namespace already created in infrastructure job)
          helm upgrade --install kairoflow ./helm/kairoflow \
            --namespace kairoflow \
            --values values.prod.yaml \
            --wait \
            --timeout 10m

      - name: Verify deployment
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          # Wait for deployment to be ready
          kubectl rollout status deployment/kairoflow-web-app -n kairoflow --timeout=5m
          
          # Check pod status
          kubectl get pods -n kairoflow
          
          # Show deployment info
          kubectl get all -n kairoflow

      - name: Run post-deployment tests
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          # Get service endpoint
          SERVICE_IP=$(kubectl get service kairoflow-web-app -n kairoflow -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Test health endpoint (if accessible)
          if [ ! -z "$SERVICE_IP" ]; then
            curl -f http://$SERVICE_IP/health || echo "Health check not accessible from external"
          fi
          
          # Check CronJob
          kubectl get cronjob -n kairoflow

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig

      - name: Rollback Helm release
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          helm rollback kairoflow -n kairoflow || echo "No previous release to rollback"

      - name: Notify rollback
        run: |
          echo "::warning::Deployment failed and was rolled back"